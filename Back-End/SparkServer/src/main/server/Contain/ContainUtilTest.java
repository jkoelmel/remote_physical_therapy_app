package main.server.Contain;

import main.server.Workout.Workout;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

/**
 * Test class for API endpoints using mocked HTTP requests and responses generated by junit and
 * Mockito
 */
class ContainUtilTest {

  @Mock HttpServletRequest request;

  @Mock HttpServletResponse response;

  @BeforeEach
  public void setUp() throws Exception {
    MockitoAnnotations.openMocks(this);
  }

  /**
   * Requires the workout_id from the HTTP request params to be tested during initial workout
   * constructor call
   */
  @Test
  void testSelectExercises() {

    when(request.getParameter("workout_id")).thenReturn("1");
    when(response.getStatus()).thenReturn(200);

    Workout workout = new Workout(Integer.parseInt(request.getParameter("workout_id")));

    assertEquals(1, workout.getWorkoutId());
    assertEquals(200, response.getStatus());
  }

  /**
   * Requires a title, pt, and array of exercises to be passed in from HTTP request pararms to
   * create a new workout. Param passing being the focal point of this test method
   */
  @Test
  void testCreateWorkout() {

    when(request.getParameter("title")).thenReturn("test");
    when(request.getParameter("pt")).thenReturn("100");
    when(request.getParameterValues("exercise_id")).thenReturn(new String[] {"1", "2", "3"});
    when(response.getStatus()).thenReturn(200);

    Workout workout = new Workout(null);
    workout.setTitle(request.getParameter("title"));
    workout.setPT(Integer.parseInt(request.getParameter("pt")));

    String[] exercises = request.getParameterValues("exercise_id");

    for (int i = 0; i < exercises.length; i++) {
      assertEquals(String.valueOf(i + 1), exercises[i]);
    }

    assertEquals(200, response.getStatus());
  }
}
