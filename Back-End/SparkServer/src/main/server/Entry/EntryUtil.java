package main.server.Entry;

import com.google.gson.Gson;
import main.server.Server;
import spark.Request;
import spark.Response;

import java.sql.*;
import java.util.ArrayList;

/**
 * EntryUtil class: Provides functions for usage in endpoints so that the actual functionality of
 * the CRUD operations in Entry class are encapsulated properly
 */
public class EntryUtil {

  /**
   * selectSpecific: Uses the entry_id value from the queryMap provided by the browser request to
   * search the database
   *
   * @param request
   * @param response
   * @return JSON object of the desired entry
   */
  public static String selectSpecific(Request request, Response response) {
    String toReturn = "";
    try {
      Entry entry = new Entry(Integer.parseInt(request.queryMap().get("entry_id").value()));
      Gson gson = new Gson();
      toReturn = gson.toJson(entry.getDBEntry());

      System.out.println("Entry has been selected");
      response.type("application/json");
      response.status(200);
    } catch (SQLException sqlEx) {
      System.err.println(sqlEx.toString());
      response.status(500);
    } catch (Exception ex) {
      System.err.println(ex.toString());
      response.status(400);
    }
    return toReturn;
  }

  /**
   * selectAll: Uses the patient_id value from the queryMap provided by the browser request to
   * search the database
   *
   * @param request
   * @param response
   * @return 10 most recent entries generated by desired patient, in descending order by timestamp
   */
  public static String selectAll(Request request, Response response) {
    String toReturn = "";
    String query =
        "SELECT * FROM entry WHERE patient = "
            + Integer.parseInt(request.queryMap().get("patient_id").value())
            + " ORDER BY created_on DESC LIMIT 10";

    try (Connection con =
            DriverManager.getConnection(
                Server.databasePath, Server.databaseUsername, Server.databasePassword);
        PreparedStatement pst = con.prepareStatement(query)) {
      ResultSet rs = pst.executeQuery();

      ArrayList<Entry> list = new ArrayList<>();
      while (rs.next()) {
        Entry entry = new Entry(rs.getString("entry"), rs.getInt("patient"));
        entry.setEntry_id(rs.getInt("entry_id"));
        entry.setCreated_on(rs.getTimestamp("created_on"));
        entry.setComment(rs.getString("comment"));
        list.add(entry);
      }
      Gson gson = new Gson();
      toReturn = gson.toJson(list);

      System.out.println("All entries have been selected");
      response.type("application/json");
      response.status(200);
    } catch (SQLException sqlEx) {
      System.err.println(sqlEx.toString());
      response.status(500);
    } catch (Exception ex) {
      System.err.println(ex.toString());
      response.status(400);
    }
    return toReturn;
  }

  /**
   * registerEntry: Uses the entry String and patient_id value from the queryMap provided by the
   * browser request to place a new entry into the database
   *
   * @param request
   * @return response status code for debugging and front-end event handling
   */
  public static Integer registerEntry(Request request) {
    try {
      Entry entry =
          new Entry(
              request.queryMap().get("entry").value(),
              Integer.parseInt(request.queryMap().get("patient_id").value()));
      entry.createEntry();
      return 200;
    } catch (SQLException sqlEx) {
      System.err.println(sqlEx.toString());
      return 500;
    } catch (Exception ex) {
      System.err.println(ex.toString());
      return 400;
    }
  }

  /**
   * Add a comment to an existing entry, given it's ID.
   *
   * @param request Required parameters: entry_id, comment
   * @return The status code value
   */
  public static Integer updateComment(Request request) {
    try {
      Entry entry = new Entry(Integer.parseInt(request.queryMap().get("entry_id").value()));
      entry.getDBEntry().updateEntry(request.queryMap().get("comment").value());

      return 200;
    } catch (SQLException sqlEx) {
      System.err.println(sqlEx.toString());
      return 500;
    } catch (Exception ex) {
      System.err.println(ex.toString());
      return 400;
    }
  }
}
